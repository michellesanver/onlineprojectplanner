#labels Docs
=AJAX template; Widget help=

The jquery plugin window can be used in two modes; Iframe och content/AJAX. Observe that the two modes cannot be switched if a window is created with one mode. For example: if a window is created with calling an URL then it is not possible to use setContent.


==Folders==
Each widget is placed in _*system/application/widgets/(name)*_ where _*(name)*_ is the name of the widget without (). Inside the folder for the widget the structure is just like Codeigniter:
    
 * _*(name)/controllers*_ controller-classes (inherit from CI Controller)
 * _*(name)/js*_ external javascript (recommended, not an requirement)
 * _*(name)/css*_ external stylesheets (recommended, not an requirement)
 * _*(name)/libraries*_ libraries
 * _*(name)/models*_ models (database, inherit from CI model)
 * _*(name)/views*_ views (Iframe requires full html-pages for each view)

    
==Common Javascript==
    
Online Project Planner provides a number of common global functions and variables that can be used:
    
===Variables===
 * _*BASE_URL*_ base_url from CI (no index.php)
 * _*SITE_URL*_ site_url from CI (WITH index.php)
 * _*CURRENT_PROJECT_ID*_ ID to current project

===Functions===

_*show_message(message)*_ <br>
_Explanation:_ this function will display an ok-message<br>
_Parameters:_
 * message is a string with the message to be displayed

_*show_errormessage(message)*_<br>
_Explanation:_ this function will display an error-message<br>
_Parameters:_
 * message is a string with the message to be displayed

_*show_ajax_loader(divID, divClass)*_<br>
_Explanation:_ this function will display an ajax-spinner in divID or divClass (only one parameter is required, send null to the other one)<br>
_Parameters:_
 * divID is a string with the id to the div that should have a ajax spinner (or send null)
 * divClass is a string with the class to the div that should have a ajax spinner (or send null)


_*show_ajax_error(divID, divClass, loadURL, errorIcon)*_<br>
_Explanation:_ this function will display an error. use divID or divClass (send null to the one that is not used). if errorIcon (an image) is sent then it is displayed also.<br>
_Parameters:_
 * divID is a string with the id to the div that should have a ajax spinner (or send null)
 * divClass is a string with the class to the div that should have a ajax spinner (or send null)
 * loadURL a string with the url that failed to load
 * errorIcon is a string with a image to be displayed before the message (optional)

==URL's==
Codeigniter has an extension in the library Router to make it possible to have another folder-structure and URL's. When calling for a controller for a widget, use this syntax:
    
_*SITE_URL + "/widget/(name)/(controller)"*_ where _*(name)*_ is the name of the widget and _*(controller)*_ is the name of the controller.

*Example*:<br>
SITE_URL + "/widget/iframe_template/main"; this will call the controller main for the widget iframe_template.
    

==Settings.xml==
Each widget is required to have the file settings.xml inside the root-folder of the widget. Here is an example with comments:
    
{{{
<?xml version="1.0"?>
<!-- root -->
<settings>
    <!--  short description of the widget -->
	<about>A template and help for developing widgets with Iframe-style</about>
    <!-- version of widget-->
	<version>1.0</version>
    <!-- link to website -->
	<link>none</link>
    <!-- name of author -->
	<author>Fredrik Johansson</author>
    <!-- icon to widget relative to main widget folder (can be left empty and a generic icon will be loaded) -->
	<icon>help-desk-icon.png</icon>
    <!-- title of widget; will be placed under icon (can be left empty) -->
    <icon_title>Iframe Template</icon_title>
    <!-- namespace of widget (namespace = javascript object) -->
    <widget_object>iframeTemplateWidget</widget_object>
    <!--
        list of files to be loaded relative to main folder of widgets
        (theese files will be loaded upon project start)
        
        valid types are; javascript, css
    -->
	<load>
		<file type="javascript">js/iframe-template.js</file>
		<file type="css">css/iframe-styles.css</file>
	</load>
</settings>
}}}
    

==Setup (javascript)==
Set the name for the namespace of the widget in settings.xml and then create a javascript-file with the initial code to start a widget. Here is an example with comments:
   

*Example 1:* this is from ajax_template and uses common funtions but also implements own functions for _load_ and _post_
   
{{{
   
// place widget in a namespace (javascript object simulates a namespace)
   
// place widget in a namespace (javascript object simulates a namespace)
ajaxTemplateWidget = {

    // widget specific settings
    partialContentDivClass: 'ajax_template_partial', // optional
    widgetTitle: 'AJAX template',
    widgetName: 'ajax_template', // also name of folder
	
    // id to current window	
		currentID: null,
    
    // function that will be called upon start (REQUIRED - do NOT change the name)
    open: function(widgetIconId) {
			// set options for window
			var windowOptions = {
				// change theese as needed
				title: ajaxTemplateWidget.widgetTitle,
				width: 800,
				height: 450,
				x: 30,
				y: 15
			};
	      
			// create window
			this.currentID = Desktop.newWidgetWindow(windowOptions, widgetIconId, ajaxTemplateWidget.partialContentDivClass);
			
			// load the first page upon start
      var loadFirstPage = SITE_URL+'/widget/' + ajaxTemplateWidget.widgetName + '/some_controller_name';
			ajaxRequests.load(this.currentID, loadFirstPage, "ajaxTemplateWidget.loadSuccess", "ajaxTemplateWidget.setAjaxError");
		},
		
		
		
		
		/* 
		* The following functions are common for att widgets.
    * --------------------------------------------------------------------------------------- 
    */
		
    // set content in widgets div, called from the ajax request
    setContent: function(data) {
			// The success return function, the data must be unescaped befor use.
			// This is due to ILLEGAL chars in the string.
			Desktop.setWidgetContent(this.currentID, unescape(data));
    },

    // set partial content in widgets div, called from the ajax request
    setPartialContent: function(data) {
			// The success return function, the data must be unescaped befor use.
			// This is due to ILLEGAL chars in the string.
			Desktop.setWidgetPartialContent(this.currentID, unescape(data));
    },
    
    // set error-message in widgets div, called from the ajax request
    setAjaxError: function(loadURL) {
			Desktop.show_ajax_error_in_widget(this.currentID, loadURL);
    },
    
    // shows a message (example in start.php)
    example_showMessage: function(message) {
			Desktop.show_message(message);    
		},
    
    // wrapper-function that easily can be used inside views from serverside    
    loadURL: function(url, partial) {
        // prepare url
        url = SITE_URL+'/widget/'+ajaxTemplateWidget.widgetName+url;
        
        // set partial to false if not specified
        if (partial == undefined)
        {
            partial = false;    
        }
        
        // send request
        ajaxRequests.load(ajaxTemplateWidget.currentID, url, 'ajaxTemplateWidget.loadSuccess', 'ajaxTemplateWidget.setAjaxError', partial);
    },
    
    // a successfunction from an ajaxrequest
    loadSuccess: function(data, partial) {
        // partial or full?
        if (partial != undefined && partial == true)
        {
            ajaxTemplateWidget.setPartialContent(data);        
        }
        else
        {
            ajaxTemplateWidget.setContent(data);    
        }
    },
		
    // wrapper-function that easily can be used inside views from serverside
    postURL: function(formClass, url, partial) {
        // prepare url
        url = SITE_URL+'/widget/'+ajaxTemplateWidget.widgetName+url;
        
        // set partial to false if not specified
        if (partial == undefined)
        {
            partial = false;    
        }
        
        // send request
        ajaxRequests.post(ajaxTemplateWidget.currentID, formClass, url, 'ajaxTemplateWidget.loadSuccess', 'ajaxTemplateWidget.setAjaxError', partial);   
    }
    
};

}}}
   
   <p><strong><em>Note 1:</em></strong> the jquery extended function $.window is a plugin that is loaded globally.<br/>
   <strong><em>Note 2:</em></strong> make sure that the function open is present in the namespace because that is the function
   that called when a user clicks on the icon.<br/>
   <strong><em>Note 3:</em></strong> also make sure that the namespace has the following variables: <em>wnd</em>, <em>onMinimize</em> and <em>onClose</em>.<br/>
   <strong><em>Note 4:</em></strong> and last.. make sure not to change the parameters after the comment "// do NOT change theese"


*Example 2:* here is an example with a a href-link that uses the load-function.
{{{
  <a href="javascript:void(0);" onclick="ajaxTemplateWidget.load('/some_controller_name/show_documentation');">show jquery.window documentation</a>
}}}


*Example 3:* here is an example of a form that uses the post-function.
{{{
    <form method="post" action="" onsubmit="return false";  id="form1" name="form1">
        <input type="hidden" id="" name="User_id" value="<?php echo $user['User_id']; ?>" />
        <p>Username: <?php echo $user['Username']; ?></p>
        
        <p>Firstname: <input type="text" id="Firstname" name="Firstname" value="<?php echo $user['Firstname']; ?>" /><br/>
           Lastname: <input type="text" id="Lastname" name="Lastname" value="<?php echo $user['Lastname']; ?>" /></p>
        
        <p>Password: <input type="text" id="Password" name="Password" value="" /></p> 
           
        <p>Email: <input type="text" id="Email" name="Email" value="<?php echo $user['Email']; ?>" /></p>
        
        <p><input type="button" value="Save" onclick="ajaxTemplateWidget.post('form1', '/some_controller_name/save_edit_user');" /> (hit save to view an example of post)</p>
    </form>
}}}