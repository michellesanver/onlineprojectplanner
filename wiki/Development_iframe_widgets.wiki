#labels Docs
=Iframe template; Widget help=

*This version/type of widget is not recommended - use the ajax-version instead since it gives the user more visual response.*

The jquery plugin window can be used in two modes; Iframe och content/AJAX. Observe that the two modes cannot be switched if a window is created with one mode. For example: if a window is created with calling an URL then it is not possible to use setContent.

===Contents===
 * Folders
 * Common Javascript
 * URL's
 * Settings.xml 
 * Setup (javascript)

==Folders==
Each widget is placed in _*system/application/widgets/(name)*_ where _*(name)*_ is the name of the widget without (). Inside the folder for the widget the structure is just like Codeigniter:
    
 * _*(name)/controllers*_ controller-classes (inherit from CI Controller)
 * _*(name)/js*_ external javascript (recommended, not an requirement)
 * _*(name)/css*_ external stylesheets (recommended, not an requirement)
 * _*(name)/libraries*_ libraries
 * _*(name)/models*_ models (database, inherit from CI model)
 * _*(name)/views*_ views (Iframe requires full html-pages for each view)

    
==Common Javascript==
    
Online Project Planner provides a number of common global functions and variables that can be used:
    
===Variables===
 * _*BASE_URL*_ base_url from CI (no index.php)
 * _*SITE_URL*_ site_url from CI (WITH index.php)
 * _*CURRENT_PROJECT_ID*_ ID to current project

===Functions===
_*show_message(message)*_
_Explanation:_ this function will display an ok-message

_Parameters:_
 * message is a string with the message to be displayed


_*show_errormessage(message)*_
_Explation:_ this function will display an error-message

_Parameters:_
 * message is a string with the message to be displayed    



    <h2>URL's</h2>
    
    <p>Codeigniter has an extension in the library Router to make it possible to have another folder-structure and URL's. When calling for 
    a controller for a widget, use this syntax:</p>
    
    <p><em><strong>SITE_URL + "/widget/(name)/(controller)"</strong></em>; where <strong><em>(name)</em></strong> is the name
    of the widget and <strong><em>(controller)</em></strong> is the name of the controller (see folders.)</p>
    
    <p><strong>Example:</strong><br/>
    <strong><em>SITE_URL + "/widget/iframe_template/main"</em></strong>; this will call the controller main for the widget iframe_template.
    </p>
    
    <h2>Settings.xml</h2>
    
    <p>Each widget is required to have the file settings.xml inside the root-folder of the widget. Here is an example with comments:</p>
    
{{{
<?xml version="1.0"?>
<!-- root -->
<settings>
    <!--  short description of the widget -->
	<about>A template and help for developing widgets with Iframe-style</about>
    <!-- version of widget-->
	<version>1.0</version>
    <!-- link to website -->
	<link>none</link>
    <!-- name of author -->
	<author>Fredrik Johansson</author>
    <!-- icon to widget relative to main widget folder (can be left empty and a generic icon will be loaded) -->
	<icon>help-desk-icon.png</icon>
    <!-- title of widget; will be placed under icon (can be left empty) -->
    <icon_title>Iframe Template</icon_title>
    <!-- namespace of widget (namespace = javascript object) -->
    <widget_object>iframeTemplateWidget</widget_object>
    <!--
        list of files to be loaded relative to main folder of widgets
        (theese files will be loaded upon project start)
        
        valid types are; javascript, css
    -->
	<load>
		<file type="javascript">js/iframe-template.js</file>
		<file type="css">css/iframe-styles.css</file>
	</load>
</settings>
}}}
    
    <h2>Setup (javascript)</h2>
   
    <p>Set the name for the namespace of the widget in settings.xml and then create a javascript-file with the initial code to start a widget. Here
    is an example with comments:</p>
   
    <p><strong>Example:</strong></p>
   
{{{
    // place widget in a namespace (javascript object simulates a namespace)
    iframeTemplateWidget = {

        // variable for window (DO NOT CHANGE - REQUIRED)
        wnd: null, 
        
        // callbacks that is set in common.js upon start (DO NOT CHANGE - REQUIRED)     
        onMinimize: null, 
        onClose:null,
        
        // function that will be called upon start (REQUIRED - do NOT change the name)
        open: function() {
            
                        // create a new jquery window
                        this.wnd = $('#content').window({
                            // change theese as needed
                           title: "Iframe Template 1.0",
                           url: SITE_URL+"/widget/iframe_template/main",
                           width: 680,
                           height: 400,
                           x: 30,
                           y: 15,
                           
                           // do NOT change theese
                           onMinimize:  this.onMinimize, 
                           onClose:  this.onClose,
                           checkBoundary: true,
                           maxWidth: $('#content').width(),
                           maxHeight: $('#content').height(),
                           bookmarkable: false
                        });
                        
                    }
        }
        
    };
}}}
   
   <p><strong><em>Note 1:</em></strong> the jquery extended function $.window is a plugin that is loaded globally.<br/>
   <strong><em>Note 2:</em></strong> make sure that the function open is present in the namespace because that is the function
   that called when a user clicks on the icon.<br/>
   <strong><em>Note 3:</em></strong> also make sure that the namespace has the following variables: <em>wnd</em>, <em>onMinimize</em> and <em>onClose</em>.<br/>
   <strong><em>Note 4:</em></strong> and last.. make sure not to change the parameters after the comment "// do NOT change theese"
   </p>