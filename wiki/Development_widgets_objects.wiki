= Development Widgets: Objects =
I will here explain the role of the objects that are involved. 

[http://dennissangmo.se/JS_Widget_Str.jpg]

===Widget===
Widget is an object that will represent the widgetwindow and contains all the functions that are common for all diffrent kind of widgets that are developed. I wont go in to the details of this object because the main functions the widget-developer will interact with is the one located in the Desktop object. The Desktop object are the one who orders this widget-class around.

===Desktop===
Desktop is a static object that represent the real-life "desktop-area" where all the widget windows will be. It does not only take care of all the widget object, that i talked earlier about, it also know wich object that is the current one (the selected one). I will explain the variables and functions that are relevant for the widget-development. 

_Example: Desktop.setWidgetContent(data);_

====Variables====
_*widgetArray*_<br>
_Explanation:_ contais the all the open widgetwindows.


_*selectedWindowId*_<br>
_Explanation:_ contais the id of the selecte widgetwindow.

====Functions====
_*newWidgetWindow(options, widgetIconId, partialContentClasses)*_ <br>
_Explanation:_ Will open a new window and add it to the windowlist<br>
_Parameters:_
 * options (object): A list of options that will be sent to the jquery-windowobject
 * widgetIconId (String): The id of the widgeticon
 * partialContentClasses (array/string): A list of the diffrent partial areas in the widget.
_Returns:_ The id of the new window

<hr>

_*setWidgetContent(data)*_ <br>
_Explanation:_ Will transfer contentdata to the selected window<br>
_Parameters:_
 * data (String)

<hr>

_*setWidgetPartialContent(inClass, data)*_ <br>
_Explanation:_ Will transfer partialcontentdata to the selected window<br>
_Parameters:_
 * inClass (String): The classname in the window.
 * data (String)

<hr>

_*show_message(message)*_ <br>
_Explanation:_ this function will display an ok-message<br>
_Parameters:_
 * message (String): The message to be displayed

<hr>

_*show_errormessage(message)*_<br>
_Explanation:_ this function will display an error-message<br>
_Parameters:_
 * message (String): The message to be displayed

<hr>

_*show_ajax_loader_in_widget()*_<br>
_Explanation:_ this function will display an ajax-spinner in selected window<br>

<hr>

_*show_ajax_error_in_widget(loadURL)*_<br>
_Explanation:_ this function will display an request error in the selected window<br>
_Parameters:_
 * loadURL (String): The url that failed to load

<hr>

===ajaxRequest===
This static object is more of a helperobject, all to make it easier for the widget-developer to send requests to the controller.

_Example: ajaxRequest.load("http://thisproject.com/index.php/controller/function", "myWidget.ajaxSuccess", "myWidget.ajaxError", false);_

====Functions====
_*load(loadURL, successFunction, errorFunction, partial)*_<br>
_Explanation:_ Makes a ajax request for the specified loadURL and calls the successFunction with the result (html page) as an escaped (javascript escape() command) string. If an requesterror occured it calls the errorFunction with the loadURL<br>
_Parameters:_
 * loadURL (String): The url to load
 * successFunction (String): The funktion to call when success ("yourClass.yourFunction"). Must be able to catch 1 parameter (the page), it will be escaped, use function unescape(). 
 * errorFunction (String): The funktion to call when error ("yourClass.yourFunction"). Must be able to catch 1 parameter (the failed URL).
 * partial (boolean): If this param is true, the loader will skipp to show the loading image, wich otherwise will remove the content.

<hr>

_*post(postdata, loadURL, successFunction, errorFunction, partial)*_<br>
_Explanation:_ Makes a ajax request for the specified loadURL with the postdata and calls the successFunction with the result (html page) as an escaped (javascript escape() command) string. If an requesterror occured it calls the errorFunction with the loadURL<br>
_Parameters:_
 * postdata (object): The postdata of the form. Can be caught with the jquery "serialize()" function.
 * loadURL (String): The url to load
 * successFunction (String): The funktion to call when success ("yourClass.yourFunction"). Must be able to catch 1 parameter (the page), it will be escaped, use function unescape(). 
 * errorFunction (String): The funktion to call when error ("yourClass.yourFunction"). Must be able to catch 1 parameter (the failed URL).
 * partial (boolean): If this param is true, the loader will skipp to show the loading image, wich otherwise will remove the content.

<hr>

===Widget object example (ajax_template)===
Set the name for the namespace of the widget in settings.xml and then create a javascript-file with the initial code to start a widget. Here is an example with comments:
   
====In theory====
This is a uniq static object that will contain all the function for you widget. The only thing that is required in this object in the function "open", that will be called upon start. 

Other than that, there are three types of funktions in this object.
 * *The linkcatcher:* Thies are the ones who will catch the data from a link when its clicked in your php view. Here is a good place to preform the ajaxRequest.
 * *The success/error functions:* Thies are the function who will catch the data from the ajaxRequest and send the information to the Desktop object, so it can be displayed in the widget window. A importent thing to know here is, the successdata retrieved from the ajaxRequest is escaped(), make it a habit to alwais unescape() the data befor useage.
 * *The happening function:* Thies are your specific function that will alter the information some how.

====Partial content====
If you are in need of updating a partial area in your widget without messing with the other parts. You can in that case use the "Desktop.setPartialContent". 
=====Create=====
You must tell Desktop what partial areas you are going to use in you widget when you are creating the widget with the "Desktop.newWidgetWindow" command. Its posible to send a string or an array of strings in the parameter. 
=====Use=====
A good example of how you can easily use your partialareas after a ajax-request, is to use the "currentPartial" property. Befor the ajax-request is executed, assign the currentPartial to the area you want the data to be posted in. And in the ajax-success function you tell Desktop to update that area. Dont forget to reset the "currentPartial" when your done with it.

{{{
setPartialContent: function(data) {
	Desktop.setWidgetPartialContent(this.currentPartial, unescape(data));
	this.currentPartial = null;
    },
}}}

<p><br /><a href="https://code.google.com/p/onlineprojectplanner/wiki/Development_widgets"><< back to Development Widgets</a></p>